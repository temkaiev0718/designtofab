{% schema %}
{
  "name": "Draggable Images (DAC)",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:global.colors.scheme",
      "default": "scheme-1"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Draggable Images"
    },
    {
      "type": "select",
      "id": "heading_size",
      "label": "Heading Size",
      "options": [
        {
          "value": "h1",
          "label": "H1"
        },
        {
          "value": "h2",
          "label": "H2"
        },
        {
          "value": "h3",
          "label": "H3"
        },
        {
          "value": "h4",
          "label": "H4"
        },
        {
          "value": "h5",
          "label": "H5"
        },
        {
          "value": "h6",
          "label": "H6"
        }
      ],
      "default": "h2"
    },
    { 
      "type": "text",
      "id": "description",
      "label": "Description",
      "default": "Draggable Images Description"
    },
    {
      "type": "range",
      "id": "section_height",
      "min": 500,
      "max": 2000,
      "step": 20,
      "label": "Section Height",
      "default": 900 
    },
    {
        "type": "range",
        "id" : "desktop_padding_top",
        "min": 0,
        "max": 500,
        "step" : 5,
        "default" : 80,
        "label": "Padding Top(desktop)"
    },
    {
        "type": "range",
        "id" : "mobile_padding_top",
        "min": 0,
        "max": 500,
        "step" : 5,
        "default" : 40,
        "label": "Padding Top(mobile)"
    },
    {
        "type": "range",
        "id" : "desktop_padding_bottom",
        "min": 0,
        "max": 500,
        "step" : 5,
        "default" : 100,
        "label": "Padding Bottom(desktop)"
    },
    {
        "type": "range",
        "id" : "mobile_padding_bottom",
        "min": 0,
        "max": 500,
        "step" : 5,
        "default" : 50,
        "label": "Padding Bottom(mobile)"
    }
  ],
  "blocks": [
    {
      "type": "image",
      "name": "Image Block",
      "settings": [
        {
          "type": "article",
          "id": "article",
          "label": "Article"
        },
        {
          "type": "checkbox",
          "id": "open_in_new_tab",
          "label": "Open title link in new tab",
          "default": false
        },
        {
          "type": "number",
          "id": "position_x",
          "label": "X Position",
          "default": 0
        },
        {
          "type": "number",
          "id": "position_y",
          "label": "Y Position",
          "default": 0
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Draggable Images (DAC)",
      "category": "DAC Sections",
      "blocks": [
        {
          "type": "image"
        }
      ]
    }
  ]
}
{% endschema %}

<style>
.draggable-images {
  position: relative;
  /* width: 100%;
  max-width: 100%;
  margin: auto;
  padding: 2rem; */
}

.draggable-images .draggable-images-header {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 30px;
  margin-bottom: 80px;
}

.draggable-images .draggable-images-header .dac-description * {
  font-size: 16px;
}

.draggable-images-container {
  overflow: hidden;
  position: relative;
  min-height: {{ section.settings.section_height }}px;
  width: 100%;
}

.draggable-image-block {
  position: absolute;
  cursor: move;
  user-select: none;
}

/* .draggable-image-block .draggable-image-block-wrapper {
  transform: translate(-50%, -50%);
  position: relative;
  top : 50%;
  left: 50%;
  pointer-events: none;
}

.draggable-image-block:hover .draggable-image-block-wrapper {
  animation: tiltAni 0.4s infinite linear;
}

@keyframes tiltAni {
  0% {
    transform: translate(-50%, -50%) rotate(5deg);
  } 
  50% {
    transform: translate(-50%, -50%) rotate(-5deg);
  }

  100% {
    transform: translate(-50%, -50%) rotate(0deg);
  }
} */

.draggable-image-block img {
  width: 100%;
  min-width: 180px;
  object-fit: cover;
  display: block;
  pointer-events: none;
  height: auto;
}

@media (min-width : 1025px) {
  .draggable-image-block img {
    width: 23vw;
    max-width: 400px;
  }
}

.draggable-image-block h3 {
  margin: 0;
  font-size: 15px;
  font-weight: 500;
  {% comment %} padding-left: 15px; {% endcomment %}
}

.draggable-image-block h3 a {
  color: inherit;
  text-decoration: none;
  position: relative;
  display : flex;
  gap : 10px;
  align-items : center;
}

.draggable-image-block h3 a svg {
  rotate : -90deg;
  width : 11px;
  height : auto;
}

{% comment %} .draggable-image-block h3 a::after {
  content: '';
  position: absolute;
  width: 100%;
  height: 1px;
  bottom: -2px;
  left: 0;
  background-color: currentColor;
  transform: scaleX(0);
  transform-origin: left;
  transition: transform 0.3s ease;
}

.draggable-image-block h3 a:hover::after {
  transform: scaleX(1);
} {% endcomment %}

@media (max-width : 1024px) {
  .draggable-images .draggable-images-header {
    display: flex;
    flex-direction: column;
  }

  .draggable-images-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 32px 16px;
  }

  .draggable-images-container .draggable-image-block {
    position: static;
    width : 100%;
    min-width: 100%;
    transform: none!important;
  }

  .draggable-images-container .draggable-image-block img {
    width: 100%;
  }
}

@media (max-width : 768px) {
  .draggable-images {
    /* padding: 32px 16px 60px 16px; */
  }

  .draggable-images .draggable-images-container {
    grid-template-columns: 1fr;
  }

  .draggable-images .draggable-images-header {
    margin-bottom: 32px;
  }

  .draggable-image-block h3 {
    position: relative;
    {% comment %} padding-left : 20px; {% endcomment %}
    margin-bottom: 5px;
    font-size: 13px;
  }

  {% comment %} .draggable-image-block h3::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 0;
    transform: translateY(-50%);
    width: 8px;
    height: 8px;
    border-radius: 50%;
    border: 1px solid #262626;
  } {% endcomment %}

}

/* #shopify-section-{{ section.id }} {
  background-color : {{ section.settings.bg_color }};
}

#shopify-section-{{ section.id }} * {
  color : {{ section.settings.text_color }};
}

#shopify-section-{{ section.id }} a:hover {
  color : {{ section.settings.hover_color }};
} */

#shopify-section-{{ section.id }} .draggable-images {
 padding-top: {{ section.settings.desktop_padding_top }}px; 
 padding-bottom: {{ section.settings.desktop_padding_bottom }}px; 
}

@media (max-width : 768px) {
  #shopify-section-{{ section.id }} .draggable-images {
    padding-top: {{ section.settings.mobile_padding_top }}px; 
    padding-bottom: {{ section.settings.mobile_padding_bottom }}px; 
  }
}

</style>

{%- assign color_scheme_hash = section.settings.color_scheme.settings.background_gradient | default: section.settings.color_scheme.settings.background | md5 -%}
<div class="color-scheme color-scheme--{{ section.settings.color_scheme.id }} color-scheme--bg-{{ color_scheme_hash }}">
  <div class="draggable-images container">
    <div class="draggable-images-header">
      <div class="dac-heading">
        <{{ section.settings.heading_size }} class="{{ section.settings.heading_size }}">{{ section.settings.heading }}</{{ section.settings.heading_size }}>
      </div>
      <div class="dac-description">
        {{ section.settings.description }}
      </div>
    </div>
    
    <div class="draggable-images-container" id="draggableContainer">
      {% for block in section.blocks %}
        {% if block.type == 'image' %}
          <div class="draggable-image-block"
              data-block-id="{{ block.id }}"
              data-x="{{ block.settings.position_x }}"
              data-y="{{ block.settings.position_y }}"
              style="transform: translate({{ block.settings.position_x }}px, {{ block.settings.position_y }}px)">
            {% comment %} <div class="draggable-image-block-wrapper"> {% endcomment %}
              <h3>
                {%- if block.settings.article.metafields.custom.internal_url != blank or block.settings.article.metafields.custom.external_url != blank -%}
                  {%- if block.settings.open_in_new_tab == true -%}
                    {%- assign link = block.settings.article.metafields.custom.external_url -%}
                  {%- else -%}
                    {%- assign link = block.settings.article.metafields.custom.internal_url -%}
                  {%- endif -%}
                  <a href="{{ link }}" {% if block.settings.open_in_new_tab %}target="_blank" rel="noopener"{% endif %}>
                    <svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" version="1.1" viewBox="0 0 11 11">
                      <path d="M1.1,9.4h7.3S.3,1.3.3,1.3l.9-.9,8.1,8.1V1.2s1.3,1.3,1.3,1.3v8.2s-8.5,0-8.5,0l-1.1-1.3Z"/>
                    </svg>
                    {{ block.settings.article.title }}
                  </a>
                {%- else -%}
                  {{ block.settings.article.title }}
                {%- endif -%}
              </h3>
              {% if block.settings.article.image %}
                {{ block.settings.article.image | image_url: width: 1000 | image_tag }}
              {% endif %}
            {% comment %} </div> {% endcomment %}
          </div>
        {% endif %}
      {% endfor %}
    </div>
  </div>
</div>


<script>
document.addEventListener('DOMContentLoaded', function() {
  const container = document.getElementById('draggableContainer');
  const blocks = container.getElementsByClassName('draggable-image-block');

  const x_len = (window.innerWidth - document.querySelector('.draggable-image-block').clientWidth) / 100;
  const y_len = 12;

  document.querySelectorAll('#shopify-section-{{ section.id }} .draggable-image-block').forEach(block => {
    var x_pos = block.getAttribute("data-x") * x_len;
    var y_pos = block.getAttribute("data-y") * y_len;
    block.style.transform = "translate(" + x_pos + "px, " + y_pos + "px)";
    block.dataset.x = x_pos;
    block.dataset.y = y_pos;
  });

  // Set initial z-index for all blocks
  Array.from(blocks).forEach(block => {
    block.style.zIndex = '1';
  });

  Array.from(blocks).forEach(block => {
    let isDragging = false;
    let currentX;
    let currentY;
    let initialX;
    let initialY;
    let xOffset = parseInt(block.dataset.x) || 0;
    let yOffset = parseInt(block.dataset.y) || 0;

    // Add mouseenter event listener
    block.addEventListener('mouseenter', () => {
      // Reset all blocks to z-index 1
      Array.from(blocks).forEach(b => {
        b.style.zIndex = '1';
      });
      // Set hovered block to z-index 2
      block.style.zIndex = '2';
    });

    block.addEventListener('mousedown', dragStart);
    block.addEventListener('mousemove', drag);
    block.addEventListener('mouseup', dragEnd);
    block.addEventListener('mouseleave', dragEnd);

    function dragStart(e) {
      initialX = e.clientX - xOffset;
      initialY = e.clientY - yOffset;

      if (e.target === block) {
        isDragging = true;
      }
    }

    function drag(e) {
      if (isDragging) {
        e.preventDefault();
        
        // Calculate new position
        let newX = e.clientX - initialX;
        let newY = e.clientY - initialY;

        // Get container and block dimensions
        const containerRect = container.getBoundingClientRect();
        const blockRect = block.getBoundingClientRect();

        // Calculate boundaries
        const minX = 0;
        const maxX = containerRect.width - blockRect.width;
        const minY = 0;
        const maxY = containerRect.height - blockRect.height;

        // Constrain movement within boundaries
        currentX = Math.min(Math.max(newX, minX), maxX);
        currentY = Math.min(Math.max(newY, minY), maxY);

        xOffset = currentX;
        yOffset = currentY;

        setTranslate(currentX, currentY, block);
      }
    }

    function dragEnd(e) {
      initialX = currentX;
      initialY = currentY;
      isDragging = false;
    }

    function setTranslate(xPos, yPos, el) {
      el.style.transform = `translate(${xPos}px, ${yPos}px)`;
    }
  });
});
</script>